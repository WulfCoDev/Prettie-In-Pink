datasource db {
  provider = "postgresql"
  // Wasp requires that the url is set to the DATABASE_URL environment variable.
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  
}

// Wasp requires the `prisma-client-js` generator to be present.
generator client {
  provider = "prisma-client-js"
}

model Service {
  id             Int  @id @default(autoincrement())
  title          String
  lengthMinutes  Int
  price          Decimal @default(0.00)
  description    String
  category       String
  appointments   AppointmentService[]

}

model User {
  id             Int @id @default(autoincrement())
  createdAt      DateTime @default(now())
  firstName      String
  lastName       String
  email          String @unique
  phoneNumber    String
  isAdmin        Boolean @default(false)
  addresses      Address[]
  appointments   Appointment[]
}

model Address {
  id             Int @id @default(autoincrement())
  street         String
  city           String
  state          String
  zipCode        String
  userId         Int
  user           User   @relation(fields: [userId], references: [id], onDelete: Cascade)    
}

model Appointment {
  id             Int @id @default(autoincrement())
  services       AppointmentService[]
  date           DateTime
  startTime      DateTime
  endTime        DateTime
  totalDuration  Int
  totalPrice     Decimal @default(0.00)
  userId         Int
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)

}

model AppointmentService {
  appointmentId  Int
  serviceId      Int
  appointment    Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  service        Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@id([appointmentId, serviceId]) 
}


model Availability {
id              Int @id @default(autoincrement())
date            String
time            String
@@unique([date, time])
}